이 코드는 ROS 2 (Robot Operating System 2)와 PX4가 ArUco 마커 기반 착륙을 구현하기 위해 어떻게 상호 작용하는지 보여줍니다. 각각의 요소가 어떤 역할을 하는지 설명하겠습니다.

1. ROS 2와 PX4의 연동
ROS 2는 로봇 제어와 관련된 다양한 노드(Node)들이 메시지를 주고받는 통신 플랫폼입니다. PX4는 드론의 제어 및 상태 관리를 담당하는 비행 컨트롤러입니다. ROS 2와 PX4가 함께 작동할 때, ROS 2 노드는 PX4와의 통신을 통해 드론의 위치, 속도, 자세 등을 제어할 수 있습니다.

MAVROS: PX4와 ROS 사이의 중간 다리 역할을 하는 ROS 패키지입니다. PX4의 MAVLink 프로토콜을 통해 ROS 노드들이 드론과 통신할 수 있도록 합니다. 이 코드는 PX4와 ROS 2 간 통신이 이미 설정된 상태에서 작동한다고 가정합니다.
2. 코드 구조
이 코드는 두 개의 노드로 구성되어 있습니다:

ArucoMarkerDetector: 카메라를 통해 ArUco 마커를 탐지하고, 그 정보를 퍼블리시합니다.
DroneControllerNode: ArUco 마커의 좌표를 구독하여 드론이 마커의 중앙으로 이동하고 착륙하도록 제어합니다.
2.1 ArucoMarkerDetector 노드
카메라 이미지 구독: /downward_camera/image_raw 토픽에서 카메라의 하향 영상을 받아옵니다. 이 토픽은 Gazebo 시뮬레이터 또는 실제 드론의 카메라에서 퍼블리시되는 영상입니다.

ArUco 마커 탐지: 수신한 영상을 OpenCV의 aruco 모듈을 사용해 ArUco 마커를 탐지합니다. 마커의 중심 좌표를 계산하여 그 정보를 PoseStamped 메시지로 퍼블리시합니다.

PoseStamped 메시지는 ROS 좌표 메시지로, ArUco 마커의 중심 좌표를 담고 있습니다. 이 메시지를 /drone/aruco_pose 토픽에 퍼블리시하여, 다른 노드(여기서는 DroneControllerNode)가 이를 구독할 수 있게 합니다.
목표 마커 좌표 계산: ArUco 마커의 네 모서리를 기반으로 중심 좌표(center_x, center_y)를 계산합니다. 이 좌표는 이미지의 중심 좌표와 비교하여 드론이 목표 위치에 도달하도록 제어하는 데 사용됩니다.

python
Copy code
center_x = (corner[0][0] + corner[2][0]) / 2.0  # Convert to float
center_y = (corner[0][1] + corner[2][1]) / 2.0  # Convert to float
2.2 DroneControllerNode 노드
ArUco 마커의 좌표 구독: /drone/aruco_pose 토픽을 구독하여 ArucoMarkerDetector에서 퍼블리시한 마커의 좌표 정보를 받아옵니다.

좌표 기반 드론 제어: 드론이 ArUco 마커의 중심으로 이동하도록 좌표 차이를 계산합니다.

드론의 목표는 이미지의 중심(640x480 해상도에서는 (320, 240))과 ArUco 마커 중심 좌표가 일치하도록 하는 것입니다.

error_x와 error_y는 이미지 중심과 마커 중심 간의 차이입니다. 이 값을 기준으로 드론의 x, y 속도를 조정하여 드론이 마커 중심으로 이동하도록 제어합니다.

python
Copy code
error_x = marker_x - self.target_x
error_y = marker_y - self.target_y
제어 명령 발행: error_x, error_y 값을 기반으로 드론이 이동해야 하는 속도를 계산하여 TwistStamped 메시지를 통해 드론에 전달합니다.

twist_msg.twist.linear.x, twist_msg.twist.linear.y: 드론의 전방 및 측면 속도를 설정합니다. 이 속도는 마커 중심과 이미지 중심 간의 차이에 비례합니다.

twist_msg.twist.linear.z: 드론의 z 축 이동(즉, 하강)을 제어합니다. 드론이 ArUco 마커의 상단에 있을 때, 일정 높이 이하로 내려오도록 속도를 설정합니다.

twist_msg.twist.angular.z: yaw(회전)을 제어합니다. 여기서는 yaw 제어를 하지 않고 그대로 둡니다.

하강 제어: 드론이 ArUco 마커의 중앙에 가까워지면 publish_descent_control()을 호출하여 드론이 착륙할 수 있도록 하강 속도를 설정합니다.

python
Copy code
def publish_descent_control(self):
    # 하강 제어 메시지 생성
    twist_msg = TwistStamped()
    twist_msg.twist.linear.x = 0.0  # 전방 속도
    twist_msg.twist.linear.y = 0.0  # 측면 속도
    twist_msg.twist.linear.z = -0.2  # 하강 속도
    twist_msg.twist.angular.z = 0.0  # yaw 제어
    self.offboard_velocity_publisher.publish(twist_msg)
2.3 멀티스레드 실행 (MultiThreadedExecutor)
ROS 2에서는 여러 노드를 동시에 실행할 수 있도록 멀티스레드 executor를 사용합니다. 이 코드에서는 ArucoMarkerDetector와 DroneControllerNode 두 노드를 각각의 스레드로 실행하기 위해 MultiThreadedExecutor를 사용했습니다.
python
Copy code
executor = rclpy.executors.MultiThreadedExecutor()
executor.add_node(detector)
executor.add_node(controller)

3. PX4와 MAVROS의 연동
이 코드에서 PX4와 MAVROS가 어떻게 상호작용하는지 더 깊게 설명하겠습니다.

MAVROS: PX4는 ROS 2와 직접 통신할 수 없습니다. 대신 MAVLink 프로토콜을 사용하여 드론과 통신하는데, 이를 ROS 2에서 사용할 수 있도록 변환해주는 것이 MAVROS 패키지입니다.

이 코드에서 드론에 속도 제어 명령을 보내는 부분(TwistStamped 메시지)은 실제로 MAVROS가 이를 MAVLink 프로토콜로 변환해 PX4로 보내는 것입니다.

/mavros/setpoint_velocity/cmd_vel 토픽은 PX4에서 드론의 속도를 제어할 때 사용하는 주요 토픽 중 하나입니다. 이 토픽에 퍼블리시된 TwistStamped 메시지는 PX4가 드론의 속도 및 방향을 설정하는 데 사용합니다.

드론 제어 플로우:

카메라로부터 ArUco 마커 탐지.
탐지된 마커의 좌표를 기반으로 드론의 이동 명령 생성.
생성된 속도 명령을 TwistStamped 메시지로 MAVROS를 통해 PX4로 전달.
PX4는 전달받은 속도 명령을 기반으로 드론의 모터를 제어하여 ArUco 마커 중앙으로 이동 및 착륙.
4. ROS 2와 PX4의 통신 개요
MAVROS를 통한 PX4 제어: ROS 2에서 MAVROS를 통해 PX4의 드론을 제어할 수 있습니다. 이 코드에서는 PoseStamped와 TwistStamped 메시지를 사용하여 드론의 위치 및 속도를 제어합니다.

PX4의 반응: PX4는 MAVLink 메시지를 수신하고 드론의 모터를 제어하여 명령을 실행합니다. 이 과정에서 MAVROS가 ROS 2 메시지를 MAVLink 메시지로 변환해 PX4로 전송합니다.
